#include "TestUtils.hpp"
#include "TypeInfo.hpp"
#include "Utils.hpp"
#include <gtest/gtest.h>

#include <iostream>
#include <string>
#include <vector>

using namespace RIF;

const char *expectedCCode =
    "#include <stdbool.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include "
    "<stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include "
    "<riscv_vector.h>\ntypedef _Float16 float16_t;\ntypedef float "
    "float32_t;\ntypedef double float64_t;\n#define isNaNF16UI( a ) (((~(a) & "
    "0x7C00) == 0) && ((a) & 0x03FF))\n#define isNaNF32UI( a ) (((~(a) & "
    "0x7F800000) == 0) && ((a) & 0x007FFFFF))\n#define isNaNF64UI( a ) (((~(a) "
    "& UINT64_C( 0x7FF0000000000000 )) == 0) && ((a) & UINT64_C( "
    "0x000FFFFFFFFFFFFF )))\nint8_t value_A_mf8[70];\nint8_t "
    "value_B_mf8[70];\nint8_t output_mf8[70];\nint8_t value_A_mf4[70];\nint8_t "
    "value_B_mf4[70];\nint8_t output_mf4[70];\nint8_t value_A_mf2[70];\nint8_t "
    "value_B_mf2[70];\nint8_t output_mf2[70];\nint8_t value_A_m1[70];\nint8_t "
    "value_B_m1[70];\nint8_t output_m1[70];\nint8_t value_A_m2[70];\nint8_t "
    "value_B_m2[70];\nint8_t output_m2[70];\nint8_t value_A_m4[70];\nint8_t "
    "value_B_m4[70];\nint8_t output_m4[70];\nint8_t value_A_m8[70];\nint8_t "
    "value_B_m8[70];\nint8_t output_m8[70];\nvoid vinit_rif_init_A_m8() "
    "{\nint8_t tmp[] = "
    "{-56,79,55,-14,26,-73,-57,-22,50,-15,12,16,-65,-26,29,84,20,19,23,-74,-7,"
    "70,-28,39,92,-39,-53,-40,-82,66,-59,1,15,-75,63,55,18,74,-69,-66,86,-18,9,"
    "21,-75,34,-10,-16,67,4,85,2,-26,-19,15,-18,-89,50,-92,9,-14,-20,-15,63,15,"
    "-78,-9,-37,-27,-65,};\nfor (int i=0; i<70;++i) {value_A_m8[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_B_mf4() {\nint8_t tmp[] = "
    "{36,83,33,28,82,-68,76,-36,-86,34,-31,-18,-34,65,72,28,-100,-66,-51,38,51,"
    "-20,-91,2,-71,15,-84,-46,-94,1,100,49,68,86,32,36,-63,-26,-22,35,-3,10,-"
    "25,9,18,69,-15,93,55,84,-36,-87,33,49,-14,25,18,15,61,-24,-65,-35,48,-44,"
    "61,50,96,91,-95,7,};\nfor (int i=0; i<70;++i) {value_B_mf4[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_B_m8() {\nint8_t tmp[] = "
    "{-82,-70,35,48,74,-33,79,-81,-56,-62,76,20,70,-3,-64,20,-7,-36,12,97,30,"
    "20,33,31,10,-11,-25,85,-97,-42,39,-56,61,24,72,82,73,33,-18,-33,-16,49,-"
    "20,-84,-64,3,15,83,64,0,-59,-11,-46,37,38,78,-80,69,-56,46,-54,-65,-68,17,"
    "-48,-74,-48,29,3,70,};\nfor (int i=0; i<70;++i) {value_B_m8[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_A_mf8() {\nint8_t tmp[] = "
    "{-50,97,-56,-32,53,68,-26,77,-59,89,-45,69,-54,20,-14,-99,-89,-96,22,8,-"
    "65,-92,6,58,-4,-71,-1,-7,54,62,-55,-70,16,10,39,-10,19,-65,-46,74,51,0,-"
    "32,-92,14,-54,98,-16,-72,98,21,97,-18,48,-34,-13,-15,93,85,-38,96,-95,21,"
    "21,40,69,100,-35,9,-46,};\nfor (int i=0; i<70;++i) {value_A_mf8[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_B_m2() {\nint8_t tmp[] = "
    "{86,-59,-41,-38,-93,66,35,1,3,58,-100,-55,3,-53,40,98,-27,63,-73,-27,30,-"
    "47,81,62,-68,-38,58,-96,95,-42,-86,-86,96,-14,92,24,-79,-81,98,-85,-89,60,"
    "47,79,81,13,-8,22,-80,-89,78,-64,66,-79,-46,40,3,73,53,96,62,-89,25,-92,-"
    "70,-22,89,-42,81,-80,};\nfor (int i=0; i<70;++i) {value_B_m2[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_A_m2() {\nint8_t tmp[] = "
    "{-67,-50,80,-8,17,12,33,52,12,-54,40,-84,-10,-83,55,100,73,-83,-33,21,-39,"
    "-48,17,-38,3,-78,35,-90,50,26,5,-45,-57,81,-7,6,78,-49,87,-76,-34,-84,46,"
    "82,-20,20,-15,-85,-100,-10,48,-28,87,85,-6,-61,18,59,-34,80,46,-41,31,9,"
    "26,-71,-59,85,-93,20,};\nfor (int i=0; i<70;++i) {value_A_m2[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_A_mf4() {\nint8_t tmp[] = "
    "{-67,48,-43,-90,-100,-100,29,-25,-47,59,-50,-88,-2,8,99,68,88,42,9,-67,65,"
    "8,-63,-41,-75,44,45,-58,-22,-82,-89,73,78,13,-40,-62,62,-50,58,79,26,22,-"
    "6,-89,59,-42,-65,-84,-16,-60,-5,69,-41,0,-2,2,-22,57,18,-32,-100,-93,9,80,"
    "58,-78,-36,-74,4,-43,};\nfor (int i=0; i<70;++i) {value_A_mf4[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_B_m4() {\nint8_t tmp[] = "
    "{17,-25,62,70,-62,-79,-76,75,10,39,90,-34,-44,50,8,-8,8,49,76,9,-49,19,0,"
    "95,-19,62,24,42,64,-87,19,63,-22,66,-94,22,64,80,45,-57,-33,89,-28,1,78,"
    "74,-51,26,-25,-71,-20,-25,36,-88,75,43,52,22,16,37,-46,-85,22,-67,46,-19,-"
    "32,-18,13,-53,};\nfor (int i=0; i<70;++i) {value_B_m4[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_B_mf2() {\nint8_t tmp[] = "
    "{77,-33,91,64,64,24,-82,-60,79,-25,85,59,8,-96,29,-70,-53,42,71,-43,-75,-"
    "61,23,39,-6,4,-78,-50,-92,-66,86,-32,-99,27,70,24,19,-65,-14,-63,8,21,92,-"
    "67,-16,-86,63,89,-64,0,82,70,-24,-67,37,61,-42,35,-24,40,93,-9,-25,-37,68,"
    "-9,68,23,-12,-26,};\nfor (int i=0; i<70;++i) {value_B_mf2[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_B_mf8() {\nint8_t tmp[] = "
    "{38,-45,-53,37,-91,-65,-53,2,-5,64,-37,-55,-100,-8,-87,-83,88,-37,-87,-3,-"
    "36,-71,-11,62,-96,-91,49,17,82,53,-35,-12,32,-88,-80,-69,-6,43,31,-31,92,"
    "89,-46,-19,-58,93,25,52,-48,-74,-66,-52,79,46,77,26,-94,-78,-12,81,17,69,-"
    "50,21,-66,-20,52,49,-99,-17,};\nfor (int i=0; i<70;++i) {value_B_mf8[i] = "
    "tmp[i];\n}\n}\nvoid vadd_vv_op_mf4() {\nint8_t *placeholder0 = "
    "value_A_mf4;\nint8_t *placeholder1 = value_B_mf4;\nint8_t *placeholder2 = "
    "output_mf4;\n\nint placeholder3 = 70;\n\nfor (size_t vl; placeholder3 > "
    "0; placeholder3 -= vl) {\nvl = vsetvl_e8mf4(placeholder3);\nvint8mf4_t "
    "vec_value_A_mf4_0= vle8_v_i8mf4(placeholder0, vl);\nvint8mf4_t "
    "vec_value_B_mf4_0= vle8_v_i8mf4(placeholder1, vl);\n\nvint8mf4_t "
    "vec_output_mf4_0= vadd_vv_i8mf4(vec_value_A_mf4_0, vec_value_B_mf4_0, "
    "vl);\n\nvse8_v_i8mf4(placeholder2, vec_output_mf4_0, vl);\n\nplaceholder0 "
    "+= vl;\nplaceholder1 += vl;\nplaceholder2 += vl;\n}\n}\nvoid "
    "vinit_rif_init_A_m4() {\nint8_t tmp[] = "
    "{93,75,-31,98,-9,94,94,53,-41,-55,10,-12,-97,48,97,54,-80,60,-15,42,-30,-"
    "52,-61,-56,-62,-52,13,97,31,52,57,-90,-58,-42,39,-63,26,79,9,86,-19,-96,-"
    "54,-97,-41,22,-59,26,-34,-36,-100,59,83,60,81,-53,94,-52,-28,-64,35,-16,-"
    "13,-67,100,38,62,45,-25,-18,};\nfor (int i=0; i<70;++i) {value_A_m4[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_A_mf2() {\nint8_t tmp[] = "
    "{71,67,86,-66,-30,-89,-53,61,36,19,6,-60,40,21,71,-46,49,3,97,90,-59,-1,"
    "72,-10,99,38,95,53,65,1,35,41,-97,-96,15,-59,-4,25,-87,-20,55,-95,-44,-16,"
    "78,-86,77,6,96,50,20,-94,-100,-8,71,3,-33,83,-10,-79,-95,0,37,-8,19,94,-"
    "86,-2,82,-26,};\nfor (int i=0; i<70;++i) {value_A_mf2[i] = "
    "tmp[i];\n}\n}\nvoid vinit_rif_init_B_m1() {\nint8_t tmp[] = "
    "{0,25,50,61,75,11,77,-39,-46,-21,100,-83,-20,-32,-51,54,-41,4,-44,47,18,-"
    "78,-95,23,33,74,-12,13,-13,-17,88,73,-48,97,-63,36,-40,24,-10,26,69,-77,"
    "26,-96,82,-63,99,-62,-32,6,7,72,42,32,92,-48,-65,-78,-79,73,-19,12,-39,42,"
    "53,-14,-22,-61,-77,1,};\nfor (int i=0; i<70;++i) {value_B_m1[i] = "
    "tmp[i];\n}\n}\nvoid vadd_vv_op_m8() {\nint8_t *placeholder4 = "
    "value_A_m8;\nint8_t *placeholder5 = value_B_m8;\nint8_t *placeholder6 = "
    "output_m8;\n\nint placeholder7 = 70;\n\nfor (size_t vl; placeholder7 > 0; "
    "placeholder7 -= vl) {\nvl = vsetvl_e8m8(placeholder7);\nvint8m8_t "
    "vec_value_A_m8_0= vle8_v_i8m8(placeholder4, vl);\nvint8m8_t "
    "vec_value_B_m8_0= vle8_v_i8m8(placeholder5, vl);\n\nvint8m8_t "
    "vec_output_m8_0= vadd_vv_i8m8(vec_value_A_m8_0, vec_value_B_m8_0, "
    "vl);\n\nvse8_v_i8m8(placeholder6, vec_output_m8_0, vl);\n\nplaceholder4 "
    "+= vl;\nplaceholder5 += vl;\nplaceholder6 += vl;\n}\n}\nvoid "
    "vadd_vv_op_m4() {\nint8_t *placeholder8 = value_A_m4;\nint8_t "
    "*placeholder9 = value_B_m4;\nint8_t *placeholder10 = output_m4;\n\nint "
    "placeholder11 = 70;\n\nfor (size_t vl; placeholder11 > 0; placeholder11 "
    "-= vl) {\nvl = vsetvl_e8m4(placeholder11);\nvint8m4_t vec_value_A_m4_0= "
    "vle8_v_i8m4(placeholder8, vl);\nvint8m4_t vec_value_B_m4_0= "
    "vle8_v_i8m4(placeholder9, vl);\n\nvint8m4_t vec_output_m4_0= "
    "vadd_vv_i8m4(vec_value_A_m4_0, vec_value_B_m4_0, "
    "vl);\n\nvse8_v_i8m4(placeholder10, vec_output_m4_0, vl);\n\nplaceholder8 "
    "+= vl;\nplaceholder9 += vl;\nplaceholder10 += vl;\n}\n}\nvoid "
    "vinit_rif_init_A_m1() {\nint8_t tmp[] = "
    "{67,56,-97,-5,45,-3,75,81,66,-40,-10,-39,-23,-39,23,95,57,55,14,100,23,-"
    "78,-9,-58,-84,97,-64,10,-11,-72,-26,97,-65,28,77,13,-92,-40,51,-21,-72,22,"
    "-25,61,-18,-83,99,46,-1,-34,11,41,-73,-18,-1,-44,74,86,94,55,55,16,64,-56,"
    "15,44,63,-26,21,81,};\nfor (int i=0; i<70;++i) {value_A_m1[i] = "
    "tmp[i];\n}\n}\nvoid vadd_vv_op_m2() {\nint8_t *placeholder12 = "
    "value_A_m2;\nint8_t *placeholder13 = value_B_m2;\nint8_t *placeholder14 = "
    "output_m2;\n\nint placeholder15 = 70;\n\nfor (size_t vl; placeholder15 > "
    "0; placeholder15 -= vl) {\nvl = vsetvl_e8m2(placeholder15);\nvint8m2_t "
    "vec_value_A_m2_0= vle8_v_i8m2(placeholder12, vl);\nvint8m2_t "
    "vec_value_B_m2_0= vle8_v_i8m2(placeholder13, vl);\n\nvint8m2_t "
    "vec_output_m2_0= vadd_vv_i8m2(vec_value_A_m2_0, vec_value_B_m2_0, "
    "vl);\n\nvse8_v_i8m2(placeholder14, vec_output_m2_0, vl);\n\nplaceholder12 "
    "+= vl;\nplaceholder13 += vl;\nplaceholder14 += vl;\n}\n}\nvoid "
    "vadd_vv_op_mf8() {\nint8_t *placeholder16 = value_A_mf8;\nint8_t "
    "*placeholder17 = value_B_mf8;\nint8_t *placeholder18 = output_mf8;\n\nint "
    "placeholder19 = 70;\n\nfor (size_t vl; placeholder19 > 0; placeholder19 "
    "-= vl) {\nvl = vsetvl_e8mf8(placeholder19);\nvint8mf8_t "
    "vec_value_A_mf8_0= vle8_v_i8mf8(placeholder16, vl);\nvint8mf8_t "
    "vec_value_B_mf8_0= vle8_v_i8mf8(placeholder17, vl);\n\nvint8mf8_t "
    "vec_output_mf8_0= vadd_vv_i8mf8(vec_value_A_mf8_0, vec_value_B_mf8_0, "
    "vl);\n\nvse8_v_i8mf8(placeholder18, vec_output_mf8_0, "
    "vl);\n\nplaceholder16 += vl;\nplaceholder17 += vl;\nplaceholder18 += "
    "vl;\n}\n}\nvoid vadd_vv_op_m1() {\nint8_t *placeholder20 = "
    "value_A_m1;\nint8_t *placeholder21 = value_B_m1;\nint8_t *placeholder22 = "
    "output_m1;\n\nint placeholder23 = 70;\n\nfor (size_t vl; placeholder23 > "
    "0; placeholder23 -= vl) {\nvl = vsetvl_e8m1(placeholder23);\nvint8m1_t "
    "vec_value_A_m1_0= vle8_v_i8m1(placeholder20, vl);\nvint8m1_t "
    "vec_value_B_m1_0= vle8_v_i8m1(placeholder21, vl);\n\nvint8m1_t "
    "vec_output_m1_0= vadd_vv_i8m1(vec_value_A_m1_0, vec_value_B_m1_0, "
    "vl);\n\nvse8_v_i8m1(placeholder22, vec_output_m1_0, vl);\n\nplaceholder20 "
    "+= vl;\nplaceholder21 += vl;\nplaceholder22 += vl;\n}\n}\nvoid "
    "vadd_vv_op_mf2() {\nint8_t *placeholder24 = value_A_mf2;\nint8_t "
    "*placeholder25 = value_B_mf2;\nint8_t *placeholder26 = output_mf2;\n\nint "
    "placeholder27 = 70;\n\nfor (size_t vl; placeholder27 > 0; placeholder27 "
    "-= vl) {\nvl = vsetvl_e8mf2(placeholder27);\nvint8mf2_t "
    "vec_value_A_mf2_0= vle8_v_i8mf2(placeholder24, vl);\nvint8mf2_t "
    "vec_value_B_mf2_0= vle8_v_i8mf2(placeholder25, vl);\n\nvint8mf2_t "
    "vec_output_mf2_0= vadd_vv_i8mf2(vec_value_A_mf2_0, vec_value_B_mf2_0, "
    "vl);\n\nvse8_v_i8mf2(placeholder26, vec_output_mf2_0, "
    "vl);\n\nplaceholder24 += vl;\nplaceholder25 += vl;\nplaceholder26 += "
    "vl;\n}\n}\nint golden_vinit_rif_init_A_m8() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_B_mf4() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_B_m8() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_A_mf8() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_B_m2() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_A_m2() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_A_mf4() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_B_m4() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_B_mf2() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_B_mf8() {\nreturn 1;\n}\nint "
    "golden_vadd_vv_op_mf4() {\nint8_t tmp[] = "
    "{-31,-125,-10,-62,-18,88,105,-61,123,93,-81,-106,-36,73,-85,96,-12,-24,-"
    "42,-29,116,-12,102,-39,110,59,-39,-104,-116,-81,11,122,-110,99,-8,-26,-1,-"
    "76,36,114,23,32,-31,-80,77,27,-80,9,39,24,-41,-18,-8,49,-16,27,-4,72,79,-"
    "56,91,-128,57,36,119,-28,60,17,-91,-36,};\nfor (int i=0; "
    "i<70;++i)\nif(output_mf4[i] != tmp[i]) {\nreturn 0;\n}\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_A_m4() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_A_mf2() {\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_B_m1() {\nreturn 1;\n}\nint golden_vadd_vv_op_m8() "
    "{\nint8_t tmp[] = "
    "{118,9,90,34,100,-106,22,-103,-6,-77,88,36,5,-29,-35,104,13,-17,35,23,23,"
    "90,5,70,102,-50,-78,45,77,24,-20,-55,76,-51,-121,-119,91,107,-87,-99,70,"
    "31,-11,-63,117,37,5,67,-125,4,26,-9,-72,18,53,60,87,119,108,55,-68,-85,-"
    "83,80,-33,104,-57,-8,-24,5,};\nfor (int i=0; i<70;++i)\nif(output_m8[i] "
    "!= tmp[i]) {\nreturn 0;\n}\nreturn 1;\n}\nint golden_vadd_vv_op_m4() "
    "{\nint8_t tmp[] = "
    "{110,50,31,-88,-71,15,18,-128,-31,-16,100,-46,115,98,105,46,-72,109,61,51,"
    "-79,-33,-61,39,-81,10,37,-117,95,-35,76,-27,-80,24,-55,-41,90,-97,54,29,-"
    "52,-7,-82,-96,37,96,-110,52,-59,-107,-120,34,119,-28,-100,-10,-110,-30,-"
    "12,-27,-11,-101,9,122,-110,19,30,27,-12,-71,};\nfor (int i=0; "
    "i<70;++i)\nif(output_m4[i] != tmp[i]) {\nreturn 0;\n}\nreturn 1;\n}\nint "
    "golden_vinit_rif_init_A_m1() {\nreturn 1;\n}\nint golden_vadd_vv_op_m2() "
    "{\nint8_t tmp[] = "
    "{19,-109,39,-46,-76,78,68,53,15,4,-60,117,-7,120,95,-58,46,-20,-106,-6,-9,"
    "-95,98,24,-65,-116,93,70,-111,-16,-81,125,39,67,85,30,-1,126,-71,95,-123,-"
    "24,93,-95,61,33,-23,-63,76,-99,126,-92,-103,6,-52,-21,21,-124,19,-80,108,"
    "126,56,-83,-44,-93,30,43,-12,-60,};\nfor (int i=0; "
    "i<70;++i)\nif(output_m2[i] != tmp[i]) {\nreturn 0;\n}\nreturn 1;\n}\nint "
    "golden_vadd_vv_op_mf8() {\nint8_t tmp[] = "
    "{-12,52,-109,5,-38,3,-79,79,-64,-103,-82,14,102,12,-101,74,-1,123,-65,5,-"
    "101,93,-5,120,-100,94,48,10,-120,115,-90,-82,48,-78,-41,-79,13,-22,-15,43,"
    "-113,89,-78,-111,-44,39,123,36,-120,24,-45,45,61,94,43,13,-109,15,73,43,"
    "113,-26,-29,42,-26,49,-104,14,-90,-63,};\nfor (int i=0; "
    "i<70;++i)\nif(output_mf8[i] != tmp[i]) {\nreturn 0;\n}\nreturn 1;\n}\nint "
    "golden_vadd_vv_op_m1() {\nint8_t tmp[] = "
    "{67,81,-47,56,120,8,-104,42,20,-61,90,-122,-43,-71,-28,-107,16,59,-30,-"
    "109,41,100,-104,-35,-51,-85,-76,23,-24,-89,62,-86,-113,125,14,49,124,-16,"
    "41,5,-3,-55,1,-35,64,110,-58,-16,-33,-28,18,113,-31,14,91,-92,9,8,15,-128,"
    "36,28,25,-14,68,30,41,-87,-56,82,};\nfor (int i=0; "
    "i<70;++i)\nif(output_m1[i] != tmp[i]) {\nreturn 0;\n}\nreturn 1;\n}\nint "
    "golden_vadd_vv_op_mf2() {\nint8_t tmp[] = "
    "{-108,34,-79,-2,34,-65,121,1,115,-6,91,-1,48,-75,100,-116,-4,45,-88,47,"
    "122,-62,95,29,93,42,17,3,-27,-65,121,9,60,-69,85,-35,15,-40,-101,-83,63,-"
    "74,48,-83,62,84,-116,95,32,50,102,-24,-124,-75,108,64,-75,118,-34,-39,-2,-"
    "9,12,-45,87,85,-18,21,70,-52,};\nfor (int i=0; "
    "i<70;++i)\nif(output_mf2[i] != tmp[i]) {\nreturn 0;\n}\nreturn 1;\n}\nint "
    "main () "
    "{\nvinit_rif_init_A_m8();\nvinit_rif_init_B_mf4();\nvinit_rif_init_B_m8();"
    "\nvinit_rif_init_A_mf8();\nvinit_rif_init_B_m2();\nvinit_rif_init_A_m2();"
    "\nvinit_rif_init_A_mf4();\nvinit_rif_init_B_m4();\nvinit_rif_init_B_mf2();"
    "\nvinit_rif_init_B_mf8();\nvadd_vv_op_mf4();\nvinit_rif_init_A_m4();"
    "\nvinit_rif_init_A_mf2();\nvinit_rif_init_B_m1();\nvadd_vv_op_m8();\nvadd_"
    "vv_op_m4();\nvinit_rif_init_A_m1();\nvadd_vv_op_m2();\nvadd_vv_op_mf8();"
    "\nvadd_vv_op_m1();\nvadd_vv_op_mf2();\nprintf(\"init_A_m8 : %s\\n\", "
    "golden_vinit_rif_init_A_m8() ? \"pass\" : \"fail\");\nprintf(\"init_B_mf4 "
    ": %s\\n\", golden_vinit_rif_init_B_mf4() ? \"pass\" : "
    "\"fail\");\nprintf(\"init_B_m8 : %s\\n\", golden_vinit_rif_init_B_m8() ? "
    "\"pass\" : \"fail\");\nprintf(\"init_A_mf8 : %s\\n\", "
    "golden_vinit_rif_init_A_mf8() ? \"pass\" : \"fail\");\nprintf(\"init_B_m2 "
    ": %s\\n\", golden_vinit_rif_init_B_m2() ? \"pass\" : "
    "\"fail\");\nprintf(\"init_A_m2 : %s\\n\", golden_vinit_rif_init_A_m2() ? "
    "\"pass\" : \"fail\");\nprintf(\"init_A_mf4 : %s\\n\", "
    "golden_vinit_rif_init_A_mf4() ? \"pass\" : \"fail\");\nprintf(\"init_B_m4 "
    ": %s\\n\", golden_vinit_rif_init_B_m4() ? \"pass\" : "
    "\"fail\");\nprintf(\"init_B_mf2 : %s\\n\", golden_vinit_rif_init_B_mf2() "
    "? \"pass\" : \"fail\");\nprintf(\"init_B_mf8 : %s\\n\", "
    "golden_vinit_rif_init_B_mf8() ? \"pass\" : \"fail\");\nprintf(\"op_mf4 : "
    "%s\\n\", golden_vadd_vv_op_mf4() ? \"pass\" : "
    "\"fail\");\nprintf(\"init_A_m4 : %s\\n\", golden_vinit_rif_init_A_m4() ? "
    "\"pass\" : \"fail\");\nprintf(\"init_A_mf2 : %s\\n\", "
    "golden_vinit_rif_init_A_mf2() ? \"pass\" : \"fail\");\nprintf(\"init_B_m1 "
    ": %s\\n\", golden_vinit_rif_init_B_m1() ? \"pass\" : "
    "\"fail\");\nprintf(\"op_m8 : %s\\n\", golden_vadd_vv_op_m8() ? \"pass\" : "
    "\"fail\");\nprintf(\"op_m4 : %s\\n\", golden_vadd_vv_op_m4() ? \"pass\" : "
    "\"fail\");\nprintf(\"init_A_m1 : %s\\n\", golden_vinit_rif_init_A_m1() ? "
    "\"pass\" : \"fail\");\nprintf(\"op_m2 : %s\\n\", golden_vadd_vv_op_m2() ? "
    "\"pass\" : \"fail\");\nprintf(\"op_mf8 : %s\\n\", golden_vadd_vv_op_mf8() "
    "? \"pass\" : \"fail\");\nprintf(\"op_m1 : %s\\n\", golden_vadd_vv_op_m1() "
    "? \"pass\" : \"fail\");\nprintf(\"op_mf2 : %s\\n\", "
    "golden_vadd_vv_op_mf2() ? \"pass\" : \"fail\");\nint ret = 1; // 1 = "
    "success\nret &= golden_vinit_rif_init_A_m8();\nret &= "
    "golden_vinit_rif_init_B_mf4();\nret &= golden_vinit_rif_init_B_m8();\nret "
    "&= golden_vinit_rif_init_A_mf8();\nret &= "
    "golden_vinit_rif_init_B_m2();\nret &= golden_vinit_rif_init_A_m2();\nret "
    "&= golden_vinit_rif_init_A_mf4();\nret &= "
    "golden_vinit_rif_init_B_m4();\nret &= golden_vinit_rif_init_B_mf2();\nret "
    "&= golden_vinit_rif_init_B_mf8();\nret &= golden_vadd_vv_op_mf4();\nret "
    "&= golden_vinit_rif_init_A_m4();\nret &= "
    "golden_vinit_rif_init_A_mf2();\nret &= golden_vinit_rif_init_B_m1();\nret "
    "&= golden_vadd_vv_op_m8();\nret &= golden_vadd_vv_op_m4();\nret &= "
    "golden_vinit_rif_init_A_m1();\nret &= golden_vadd_vv_op_m2();\nret &= "
    "golden_vadd_vv_op_mf8();\nret &= golden_vadd_vv_op_m1();\nret &= "
    "golden_vadd_vv_op_mf2();\nif (!ret) return 1;\nreturn 0; }\n";

TEST(EnumerateLmul, AddVV8) {
  uint32_t seed = 0xdeadbeef;
  initializeRNG(seed);

  int length = 70;
  Graph graph;

  const SewType sew = SewType{e8};
  for (LmulType lmul : TypeInfo::validSewLmul[sew]) {
    auto a = static_cast<OneDInt8Val *>(getInitializeValue(
        OneDInt8, graph, "A_" + std::string(LMUL_STR(lmul)), length, lmul));
    auto b = static_cast<OneDInt8Val *>(getInitializeValue(
        OneDInt8, graph, "B_" + std::string(LMUL_STR(lmul)), length, lmul));
    auto c = static_cast<OneDInt8Val *>(graph.getNewValue(
        OneDInt8, "output_" + std::string(LMUL_STR(lmul)), length, lmul));
    auto op = graph.getNewOperator(AddVV8VInt8VIVI,
                                   "op_" + std::string(LMUL_STR(lmul)), lmul);
    op->addInput(0, a);
    op->addInput(1, b);
    op->addOutput(c);
    op->generateData();
  }

  graph.generateData();

  std::stringstream generatedCCode;
  graph.generateCCode(generatedCCode);

  EXPECT_EQ(generatedCCode.str(), expectedCCode);
}
